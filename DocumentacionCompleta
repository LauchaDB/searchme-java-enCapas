SEARCHME
Esta página web/app está pensada para las personas que quieren viajar por su cuenta y no saben por dónde arrancar, también muy pensada para mochileros. En esta app, cada viajero podrá subir su viaje, con los destinos visitados con sus respectivas descripciones y ubicación. Otros usuarios o viajeros podrán guardar (poner MeGusta) viajes creados por otros ya sea porque le gusto o para verlos en otro momento. Un objetivo a futuro seria que este desarrollo se conecte con la API de google maps para poder seguir viajes que otro usuario que haya subido. Otro objetivo es que se puedan unir varios viajes de diferentes o del mismo usuario, y la API sola reconozca cuales son los puntos o destinos más cercanos, ordenándolos correctamente.
Herramientas utilizadas: el desarrollo de esta aplicación se hará en JAVA para el backend con el framework Spring-boot, SQL con el motor de base de datos MYSQL (heidieSQL) y para el frontend estará desarrollado con React (SPA) por su gran escalabilidad y la posibilidad de hacerlo aplicación móvil.
Lo primero fue evaluar si existía alguna aplicación parecida en el mercado, al no haber encontrado algo parecido, se empezó a pensar el desarrollo, el alcance, la base de datos, front y demás. Luego de todo esto se arrancó con el desarrollo poco a poco y conectando sus partes, base de datos, backend y frontend.
Nomenclatura:
•	Base de datos: Las tablas de las bases de datos se escribirán de la siguiente forma, arrancan con tb y se escriben en plural (tbusuarios). Los nombres de los campos se especifican así, nombre_tabla, por ejemplo, el nombre de un destino seria como nombre_dest.
•	Backend: el cual está escrito en java, los paquetes se escriben en minúscula si es necesario más de una palabra se escriben en CamelCase. Las clases del mismo inician en mayúscula y la misma regla de CamelCase. Para las clases y variables será parecido, inician en minúscula y usamos CamelCase si se trata de más de una palabra, debemos buscar nombre para estos de forma que sea lo más descriptible y entendible posible, los métodos getter y setter inician con set o get y luego el nombre de la variable.
•	Frontend: los archivos con extencion .js deben estar escritos en mayúscula y con CamelCase ej: CardViaje.js, los archivos de estilo .css de dichos archivos .js no inician con mayúscula, pero si con CamelCase ej: cardViaje.css. A la hora de crear un nuevo componente, este debe estar dentro de la carpeta components, dentro de la carpeta component-nombrecomponente.
